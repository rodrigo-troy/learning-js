<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html
        PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xml:lang="en"
      lang="en">
<head>
    <title>Defining functions</title>
    <link rel="stylesheet"
          type="text/css"
          href="../../core.css"/>
</head>
<body>

<p class="comment">The way in which a function is defined significantly influences when the function is available to be
    invoked and how it behaves, as well as on which object the function can be invoked.</p>

<h2>JavaScript provides a couple of ways to define functions:</h2>
<ul>
    <li>Function declarations:
        <ul>
            <li>Every function declaration starts with a mandatory function keyword, followed by a mandatory function
                name and a list of optional comma-separated parameter names enclosed within mandatory parentheses,
            </li>
            <li>The function name is mandatory.</li>
            <li>The function body, which is a potentially empty list of statements, must be enclosed within an opening
                and a closing brace.
            </li>
            <li>Function declarations must have a name defined because they stand on their own. Because one of the basic
                requirements for a function is that it has to be invokable, we have to have a way to reference it, and
                the only way to do this is through its name.
            </li>
            <li>Examples:
                <ul>
                    <li><img src="declaration.png"
                             alt=""/></li>
                    <li>function myFun(){ return 1;}</li>
                </ul>
            </li>
        </ul>
    </li>
    <li>Function expressions:
        <ul>
            <li>They can be created via literals, assigned to variables and properties, and used as arguments and return
                values to and from other functions. Because functions are such fundamental constructs, JavaScript
                enables us to treat them as any other expressions.
            </li>
            <li>Functions that are always a part of another statement (for example, as the right side of an assignment
                expression, or as an argument to another function) are called function expressions.
            </li>
            <li>
                For function expressions, the function name is itâ€™s completely optional.
            </li>
            <li>Examples:
                <ul>
                    <li><img src="expression.png"
                             alt=""/></li>
                </ul>
            </li>
        </ul>
        <script type="text/javascript">
            let aFunction = function () {
                console.log("Function expression example");
            }

            aFunction();

            let anotherFunction = aFunction;
            anotherFunction();

            (function () {
                console.log("A function expression invoked immediately")
            })();

            (function pepe() {
                console.log("A named function expression invoked immediately")
            })();

            +function () {
                console.log("A function expression invoked immediately, as argument to unary operators")
            }();

            console.log(function () {
                return "Two function expression invoked immediately"
            }() + function () {
                return ", as argument"
            }());

            console.log(function () {
                return "A function expression invoked immediately, as argument"
            }());
        </script>
    </li>
    <li>Arrow function
        <ul>
            <li><img src="arrow.png"
                     alt=""/></li>
            <li>Often called lambda functions.</li>
            <li>Are a simplification of function expressions.</li>
            <li>The arrow function definition starts with an optional comma-separated list of parameter names.</li>
            <li>Examples:
                <ul>
                    <li>myArg => myArg*2</li>
                </ul>
            </li>
        </ul>
        <script type="text/javascript">
            let parentisar = text => "(" + text + ")";
            console.log(parentisar("texto entre parentesis"));

            let prefijoSufijo = (prefijo, texto, sufijo) => prefijo + texto + sufijo;
            console.log(prefijoSufijo("&lt;", "un texto", ">"));

            console.log((() => "Arrow function example")());

            console.log((() => {
                return "Arrow function example"
            })());

            console.log((() => {
                let a = "Arrow ";
                let b = "function ";
                let c = "example ";
                return a + b + c;
            })());
        </script>
    </li>
    <li>Function constructors
        <ul>
            <li>Enables us to dynamically construct a new function from a string that can also be dynamically
                generated.
            </li>
            <li>Examples:
                <ul>
                    <li>new Function('a', 'b', 'return a + b')</li>
                </ul>
            </li>
        </ul>
        <script type="text/javascript">
            let functionConstruction1 = new Function('a', 'b', 'return a + b');
            console.log("functionConstruction1 result: " + functionConstruction1(30, 20));
        </script>
    </li>
    <li>Generator functions
        <ul>
            <li>Enable us to create functions that, unlike normal functions, can be exited and reentered later in the
                application execution, while keeping the values of their variables across these re-entrances.
            </li>
            <li>Examples:
                <ul>
                    <li>function* myGen(){yield 1;}</li>
                </ul>
            </li>
        </ul>
    </li>
</ul>

</body>
</html>
